# Repository Guidelines

## Project Structure & Module Organization
- Entry point: `lib/main.dart`. Organize features under `lib/<feature_name>/` (e.g., `views/`, `widgets/`, `services/`). Keep shared pieces close to where they’re used.
- Platform scaffolding: `android/`, `ios/`, `linux/`, `macos/`, `web/`, `windows/`. Modify only for platform-specific integrations.
- Tests mirror the source tree in `test/`; place reusable data in `test/fixtures/`.
- Register runtime assets in `pubspec.yaml` under `flutter/assets:` and keep paths stable.

## Build, Test, and Development Commands
- `flutter pub get` — sync dependencies from `pubspec.yaml`.
- `flutter run -d chrome` — fast web hot-reload for UI iteration.
- `flutter run -d windows` (or another device id) — validate native builds locally.
- `flutter test` — run unit/widget tests; keep green before merging.
- `dart analyze` — enforce lints; treat new warnings as blockers.
- `dart format .` — format sources (2-space indent, trailing commas).
- `flutter build apk --release` — produce the Android release artifact.
- Tip: after SDK upgrades, run `flutter doctor` to verify the toolchain.

## Coding Style & Naming Conventions
- Lints via `analysis_options.yaml` (`flutter_lints`).
- Indentation: 2 spaces; include trailing commas on multiline args/collections.
- Naming: PascalCase (classes/enums), lowerCamelCase (methods/variables), snake_case filenames (e.g., `user_profile_view.dart`).
- Keep widget `build` methods declarative; move side effects into controllers/services.

## Testing Guidelines
- Framework: `flutter_test`.
- Name tests `{subject}_test.dart`; group with `group('aFeature', ...)`.
- Prefer `find` helpers for widget expectations; share mocks via `test/fixtures/`.
- Cover high‑risk flows and new logic with meaningful assertions.
- Run `flutter test` locally (and in CI when applicable).

## Commit & Pull Request Guidelines
- Use Conventional Commits (`feat:`, `fix:`, `chore:`); keep changes focused and reference issues when applicable.
- Describe behavioral impact in the commit body when UX changes.
- PRs: summarize functional impact, list test evidence (`flutter test`, device IDs), and attach screenshots/recordings for visual changes.
- Flag reviewers when platform scaffolding changes so they can validate on their target OS.

## Environment & Tooling Tips
- Track the Flutter SDK version in use and keep `pubspec.lock` committed for parity.
- Use `dart analyze` or IDE diagnostics before pushing to catch regressions early.
